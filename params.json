{"tagline":"using YAML as a DML since 2012","google":"","body":"# Welcome to less hair-pulling\r\n\r\n*Trine* is a utility for World of Warcraft emulators (e.g. TrinityCore) that\r\nuses [YAML](http://yaml.org/) as a DML (data manipulation language) to\r\ninterface with an emulator's database(s).\r\n\r\n## Why use trine?\r\n\r\nLet's say you want to combine glyph vendors with class trainers. A worthy cause,\r\nbut a rather tedious one. Without trine, your options are pretty limited:\r\n\r\n* You can do everything in-game, using GM commands to manually look up and\r\n  add items to your vendors. If you screw up during this process, or the\r\n  vendor gets deleted, you have to start from scratch.\r\n* You can manually write the SQL required to create the vendor, lookup the\r\n  flags required for a combined vendor/trainer, and lookup the item IDs for\r\n  all glyphs for a particular class, and then create the associated row in\r\n  the `npc_vendor` table for each glyph to be sold.\r\n\r\nWith *trine*, you can forget about looking up flags and item IDs everytime you want\r\nto do something trivial like creating and populating a vendor. The following YAML\r\ndocument takes an existing NPC by the name of *\"Druid Trainer\"*, flags it both as\r\na class trainer and vendor, and populates the `npc_vendor` table with Druid-only\r\nglyphs related to the vendor:\r\n\r\n```yaml\r\nnpc:\r\n  - method: UPDATE\r\n    where:\r\n        name: Druid Trainer\r\n    subname:\r\n    npcflag: [GOSSIP, TRAINER, VENDOR]\r\n    items: !query\r\n        model: item\r\n        what: entry\r\n        where:\r\n            name: Glyph of %\r\n            AllowableClass: DRUID\r\n```\r\n\r\n*Trine* comes with a small subset of named flags and identifiers obtained from\r\n`.dbc` files (in English only for now, unfortunately). These [constants][const_py]\r\nallow for the use of human friendly identifiers such as `DRUID` rather than `11`.\r\n\r\n# Requirements\r\n\r\n* [Python](http://python.org), version 2.6 or greater\r\n* [PyYAML](http://pyyaml.org/)\r\n* [SQLAlchemy](http://sqlalchemy.org)\r\n* [schema](https://github.com/halst/schema)\r\n* [sweet](http://github.com/darvid/sweet)\r\n* An up-to-date [TrinityCore](http://www.trinitycore.org/) database.\r\n\r\n[AutoCode](http://code.google.com/p/sqlautocode/) is an optional dependency that\r\nis highly recommended if you want to extend this library in any way. It was used\r\nto generate the model classes for TrinityCore's **world** database.\r\n\r\nThe only wrinkle is that it does not validate field names to prevent the use of\r\nPython reserved keywords as column names, so you will have to manually find and\r\nreplace all instances of *class*, for instance, which is used as the column name\r\nfor numerous TrinityCore tables.\r\n\r\n# Configuration\r\n\r\nSave the following in the working directory (specified by `-w`) or `~/.trine/` as\r\n`config.yml`.\r\n\r\n```yaml\r\ndb:\r\n    type: mysql\r\n    username: trinity\r\n    password: password\r\n    host: localhost\r\n    world_db: world\r\n```\r\n\r\n# Usage\r\n\r\n    usage: trine [-h] [-w [PATH]] spec [operation]\r\n\r\n    positional arguments:\r\n      spec                  name of spec or 'all'\r\n      operation             [execute|dml]\r\n\r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -w [PATH], --working-wdirectory [PATH]\r\n                            specify path to YAML documents\r\n\r\n## Working directories\r\n\r\n*Working directories* are simply folders with a `config.yml` and any number of\r\n*trine* schema files (`*.yml`). They serve no other purpose other than keeping\r\nyour files organized.\r\n\r\nBy default, trine looks for `.yml` files in `~/.trine/` - but you can specify a\r\ndifferent working directory with the `-w` option.\r\n\r\n## Operations\r\n\r\n*Trine* supports two main operations:\r\n\r\n* **execute** - executes and commits all changes made by given schema files to\r\n  the database.\r\n* **dml** - outputs generated SQL queries to standard output, but does not\r\n  execute any queries.\r\n\r\n# Schema Structure\r\n\r\n*Trine* expects a mapping of mappings representing model (table) names and their\r\nrespective schemas. This forces the user to organize schemas by model name. For\r\nexample:\r\n\r\n```yaml\r\n--- # item prices\r\nitem:\r\n  - method: UPDATE\r\n    where:\r\n        name: Glyph of %\r\n    SellPrice: 0\r\n  - method: UPDATE\r\n    where:\r\n      name: Black Jelly\r\n    SellPrice: 100\r\n```\r\n\r\n## Methods\r\n\r\nRather than use verbs such as in SQL (`SELECT`, `INSERT`, `UPDATE`), *Trine* uses\r\n*\"methods\"* that are indicative of commonly used operations when manipulating\r\nemulator databases.\r\n\r\n### UPDATE\r\n\r\nThis method expects a `where` mapping and issues a SQL `UPDATE` based on the rest\r\nof the schema mapping.\r\n\r\n### MERGE\r\n\r\nThis method expects a `merge-from` key that is either the `entry` of another row\r\nfrom the same table as the current schema, or a `where` mapping. **MERGE** is\r\nparticularly useful for custom NPCs or items, as it simplifies both the process\r\nof creating them as well as updating them.\r\n\r\n## Documents\r\n\r\nEach YAML file can contain any number of documents, which are delimited by three\r\ndashes (`---`). Currently, documents do not have any special purpose in *Trine*\r\nother than providing a means of organization.\r\n\r\n[const_py]: https://github.com/darvid/trine/blob/master/trine/constants.py","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Trine"}